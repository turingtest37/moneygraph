PREFIX gist: <https://w3id.org/semanticarts/ns/ontology/gist/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX mg: <https://w3id.org/moneygraph/ns/ontology/>
PREFIX mgx: <https://w3id.org/moneygraph/ns/taxonomy/>
PREFIX mg3: <https://w3id.org/moneygraph/ns/data/>
PREFIX xyz: <http://sparql.xyz/facade-x/data/>
PREFIX fx: <http://sparql.xyz/facade-x/ns/>

CONSTRUCT
{

# Create the basic event. 
    ?__activity a gist:Event .
    ?__activity a ?__coupon_payment_event . # Optional
    ?__activity gist:isCharacterizedAs ?__event_type .
    ?__activity skos:prefLabel ?__activity_label .
    ?__activity gist:description ?Description .
    ?__activity mg:transactionDate ?__transaction_date .
    ?__activity mg:settlementDate ?__settlement_date .
    ?__activity mg:actionCode ?Action .

# Security account is linked to Security
    ?__security_account a gist:InvestmentAccount ;        
        gist:isAffectedBy ?__activity ;
        gist:hasPositionIn ?__security ;
    .

# If an Activity affects an InvestmentAccount balance the ?__inc_dec_asset variable will be bound as 
# mg:isIncrementedBy or mg:isDecrementedBy.
    ?__security_account ?__inc_dec_asset ?__activity .

# If an Activity affects the Cash balance it will bind the ?__inc_dec_cash predicate
    ?__affected_cash_account ?__inc_dec_cash ?__activity .

### Security
# Repeating this here (usually should be defined in securities.rq)
# because we do not have access to old Investment Summaries
    ?__security a mg:MarketableSecurity .
    ?__security gist:isIdentifiedBy ?__security_id .
    ?__security rdfs:label ?Equity_Symbol .
    ?__security skos:prefLabel ?__symbol_str_norm .
    ?__security gist:conformsTo ?__coupon_payment_terms, ?__bond_repayment_terms .


# Security ID
    ?__security_id a gist:ID ;
        gist:isCategorizedBy ?__security_id_type ;
        gist:uniqueText ?__symbol_str_norm ;
    .

# Coupon payment terms
    ?__coupon_payment_terms
        mg:couponPaymentMonthNumber ?__coupon_mo_earlier ;
        mg:couponPaymentMonthNumber ?__coupon_mo_later ;
        mg:couponPaymentMonthDayNumber ?__mo_day_nbr ;
        gist:specifies ?__coupon_magn ;
        a mg:CouponPaymentTerms ;
    .

# Coupon is < gist:ReferenceValue < gist:Magnitude
    ?__coupon_magn a mg:BondCoupon ;
        skos:prefLabel ?__coupon_magn_label ;
        gist:hasUnitOfMeasure mg:_RatioUnit_annualInterestRate ;
        gist:numericValue ?__coupon_rate ;
        gist:isCategorizedBy mgx:_Aspect_annualInterestRate ;
    .

# Repayment Terms
    ?__bond_repayment_terms a mg:BondRepaymentTerms ;
        gist:specifies ?__repayment_event ;
        gist:specifies ?__bond_repayment_magn ;
    .

# Bond repayment at due date
    ?__repayment_event a gist:Event, gist:ScheduledEvent ;
        gist:affects ?__security_account ;
        gist:hasMagnitude ?__bond_repayment_magn ;
        gist:isCharacterizedAs mgx:_FinancialBusinessEventType_debtPrincipalRepayment ;
        mg:plannedOccursDate ?__maturity_datetime ;
    .

# Bond repayment magnitude
    ?__bond_repayment_magn a gist:Monetary ;
        gist:numericValue ?__qty_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_debtPrincipalAmount ;
    .

######### Activity Events have Magnitudes that affect account balances

# Dividend Case
    ?__activity gist:hasMagnitude ?__dividend_magn .
    ?__dividend_magn  a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityShareDividendAmount ;
    .

# Interest paid Case
    ?__activity gist:hasMagnitude ?__interest_paid_magn .
    ?__interest_paid_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_feeAmount ;
    .

# Purchase Case
    ?__activity gist:hasMagnitude ?__purchase_qty_magn .
    ?__purchase_qty_magn a gist:Magnitude ;
        gist:numericValue ?__qty_amount ;
        gist:hasUnitOfMeasure gist:_each ;
        gist:isCategorizedBy mgx:_Aspect_securityShareCount ;
    .

    ?__activity gist:hasMagnitude ?__purchase_price_magn .
    ?__purchase_price_magn a gist:Monetary;
        gist:numericValue ?__price_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityShareUnitPriceAmount ;
    .

    ?__activity gist:hasMagnitude ?__purchase_gross_amt_magn .
    ?__purchase_gross_amt_magn a gist:Monetary ;
        gist:numericValue ?__gross_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityTradeGrossAmount ;
    .

    ?__activity gist:hasMagnitude ?__purchase_commission_magn .
    ?__purchase_commission_magn a gist:Monetary ;
        gist:numericValue ?__commission_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityTradeTransactionCommission ;
    .
    
    ?__activity gist:hasMagnitude ?__purchase_net_amt_magn .
    ?__purchase_net_amt_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityTradeNetAmount ;
    .
    
    # Yield to Maturity (%)
    ?__activity gist:hasMagnitude ?__ytm_magn .
    ?__ytm_magn a gist:Magnitude ;
        gist:hasUnitOfMeasure mg:_RatioUnit_annualYield ;
# Stored here as a fraction, not a percentage, e.g. 0.04 NOT 4.0
        gist:numericValue ?__ytm_num ;
        gist:isCategorizedBy mgx:_Aspect_yieldToMaturity ;
    .

# Sale Case
    ?__activity gist:hasMagnitude ?__sale_qty_magn .
    ?__sale_qty_magn a gist:Magnitude ;
        gist:numericValue ?__qty_amount ;
        gist:hasUnitOfMeasure gist:_each ;
        gist:isCategorizedBy mgx:_Aspect_securityShareCount ;
    .

    ?__activity gist:hasMagnitude ?__sale_price_magn .
    ?__sale_price_magn a gist:Monetary;
        gist:numericValue ?__price_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityShareUnitPriceAmount ;
    .

    ?__activity gist:hasMagnitude ?__sale_gross_amt_magn .
    ?__sale_gross_amt_magn a gist:Monetary ;
        gist:numericValue ?__gross_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityTradeGrossAmount ;
    .

    ?__activity gist:hasMagnitude ?__sale_commission_magn .
    ?__sale_commission_magn a gist:Monetary ;
        gist:numericValue ?__commission_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityTradeTransactionCommission ;
    .
    
    ?__activity gist:hasMagnitude ?__sale_net_amt_magn .
    ?__sale_net_amt_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityTradeNetAmount ;
    .


# Interest received (e.g. bond coupon payments)
    ?__activity gist:hasMagnitude ?__interest_magn.
    ?__interest_magn  a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_debtInterestAmount ;
    .

# Deposit Case
    ?__activity gist:hasMagnitude ?__deposit_magn .
    ?__deposit_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_depositAmount ;
    .

# Contribution case
    ?__activity gist:hasMagnitude ?__contrib_magn .
    ?__contrib_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_depositAmount ;
    .

# Financial Transfer
    ?__activity gist:hasMagnitude ?__fin_transfer_magn .
    ?__fin_transfer_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_transferAmount ;
    .

# Asset transfer case
    ?__activity gist:hasMagnitude ?__asset_transfer_magn.
    ?__asset_transfer_magn a gist:Magnitude ;
        gist:numericValue ?__qty_amount ;
        gist:hasUnitOfMeasure gist:_each ;
        gist:isCategorizedBy mgx:_Aspect_assetTransferAmount;
    .

# Asset Transfer for Liquidation case
    ?__activity gist:hasMagnitude ?__asset_transferForLiqd_magn .
    ?__asset_transferForLiqd_magn a gist:Magnitude ;
        gist:numericValue ?__qty_amount ;
        gist:hasUnitOfMeasure gist:_each ;
        gist:isCategorizedBy mgx:_Aspect_assetTransferAmount;
    .

# Asset Liquidation - essentially a forced sale of an asset
# Needs a Quantity magnitude and a Net Amount magnitude
    ?__activity gist:hasMagnitude ?__asset_liqd_qty_magn .
    ?__asset_liqd_qty_magn a gist:Magnitude ;
        gist:numericValue ?__qty_amount ;
        gist:hasUnitOfMeasure gist:_each ;
        gist:isCategorizedBy mgx:_Aspect_securityShareCount ;
    .


    ?__activity gist:hasMagnitude ?__asset_liqd_net_amt_magn .
    ?__asset_liqd_net_amt_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_securityTradeNetAmount ;
    .

# Foreign currency exchanged
    ?__activity gist:hasMagnitude ?__fxt_magn .
    ?__fxt_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_foreignCurrencyExchangeAmount ;
    .

# Debt (bond) Repayment
    ?__activity gist:hasMagnitude ?__debt_repayment_magn .
    ?__debt_repayment_magn a gist:Monetary ;
        gist:numericValue ?__net_amount ;
        gist:hasUnitOfMeasure ?__currency ;
        gist:isCategorizedBy mgx:_Aspect_debtPrincipalAmount ;
    .

# Reverse Stock Split
    ?__activity gist:hasMagnitude ?__reverse_stk_split_qty_magn .
    ?__reverse_stk_split_qty_magn a gist:Magnitude ;
        gist:numericValue ?__qty_amount ;
        gist:hasUnitOfMeasure gist:_each ;
        gist:isCategorizedBy mgx:_Aspect_securityShareCount ;
    .

}

#### Fields

# Transaction Date
# ,Settlement Date
# ,Trade Date
# ,Action
# ,Symbol
# ,Description
# ,Quantity
# ,Price
# ,Gross Amount
# ,Commission
# ,Net Amount
# ,Currency
# ,Account #
# ,Activity Type
# ,Account Type

# Transaction Date,Settlement Date,Trade Date,Action,Symbol,Description,Quantity,Price,Gross Amount,Commission,Net Amount,Currency,Account #,Activity Type,Account Type


WHERE

{
   SERVICE <x-sparql-anything:> {

        BIND(IRI(CONCAT("file://",?_loc)) AS ?__location)

        fx:properties
            fx:location ?__location ;    
            fx:csv.headers true ;
            fx:blank-nodes false ;
            fx:csv.null-string "" ;
            fx:root ?__location ;
        .

        ?__csvline xyz:Transaction%20Date ?TransactionDate .
        ?__csvline xyz:Settlement%20Date ?SettlementDate .
        OPTIONAL { ?__csvline xyz:Trade%20Date ?TradeDate }
        OPTIONAL { ?__csvline xyz:Action ?Action }
        OPTIONAL { ?__csvline xyz:Symbol ?Equity_Symbol }
        ?__csvline xyz:Description ?Description .
        ?__csvline xyz:Quantity ?Quantity .
        ?__csvline xyz:Price ?Price .
        ?__csvline xyz:Gross%20Amount ?GrossAmount .
        ?__csvline xyz:Commission ?Commission .
        ?__csvline xyz:Net%20Amount ?NetAmount .
        ?__csvline xyz:Currency ?Currency .
        ?__csvline xyz:Account%20%23 ?AccountNumber .
        ?__csvline xyz:Activity%20Type ?ActivityType .
        OPTIONAL { ?__csvline xyz:Account%20Type ?AccountType }

    }

# Transaction Date - 2024-04-16 12:00:00 AM
    BIND(REPLACE(?TransactionDate,"^([0-9-]+).*$","$1T00:00:00") AS ?__tx_dt_str)
    BIND(STRDT(?__tx_dt_str, xsd:dateTime) AS ?__transaction_date)
    BIND(REPLACE(STR(xsd:date(?__transaction_date)),"\\W+","-") AS ?__date_key)

# Security Symbol - remove leading ., or .zz if xxxxx.zz
    BIND(STR(?Equity_Symbol) AS ?__equity_symbol_str)
    BIND(IF(
        # TODO convert to string
        STRSTARTS(?__equity_symbol_str, "."), 
        STRAFTER(?__equity_symbol_str, "."),
        IF(CONTAINS(?__equity_symbol_str, "."),
            STRBEFORE(?__equity_symbol_str, "."),
            ?__equity_symbol_str)) AS ?__symbol_str_norm)
 
# HERE TEST IF SYMBOL STARTS WITH 0-9 : if yes, is a bond
    BIND(REGEX(?__symbol_str_norm, "^[0-9]") AS ?__is_bond)

### Clean up the numbers

# Quantity
    BIND(REPLACE(REPLACE(STR(?Quantity),"[^0-9.]",""), "(\\.\\d{2})\\d*$", "$1") AS ?__qty_clean)
    BIND(xsd:integer(round(STRDT(?__qty_clean, xsd:decimal))) AS ?__qty_amount)

# Price
# Need at least 3 significant digits
    # BIND(REPLACE(REPLACE(STR(?Price),"[^0-9.]",""), "(\\.\\d{2,3})\\d*$", "$1") AS ?__price_clean)
    BIND(REPLACE(STR(?Price),"[^0-9.]","") AS ?__price_clean)
    BIND(ABS(xsd:decimal(?__price_clean)) AS ?__price_amount)

# Gross Amount
    # BIND(REPLACE(REPLACE(STR(?GrossAmount),"[^0-9.-]",""), "(\\.\\d{2})\\d*$", "$1") AS ?__grossamt_clean)
    BIND(REPLACE(STR(?GrossAmount),"[^0-9.-]","") AS ?__grossamt_clean)
    BIND(ABS(xsd:decimal(?__grossamt_clean)) AS ?__gross_amount)

# Commission
    # BIND(REPLACE(REPLACE(STR(?Commission),"[^0-9.-]",""), "(\\.\\d{2})\\d*$", "$1") AS ?__commamt_clean)
    BIND(REPLACE(STR(?Commission),"[^0-9.-]","") AS ?__commamt_clean)
    BIND(ABS(xsd:decimal(?__commamt_clean)) AS ?__commission_amount)

# Net Amount 
    # BIND(REPLACE(REPLACE(STR(?NetAmount),"[^0-9.-]",""), "(\\.\\d{2})\\d*$", "$1") AS ?__netamt_clean)
    BIND(REPLACE(STR(?NetAmount),"[^0-9.-]","") AS ?__netamt_clean)
    BIND(ABS(xsd:decimal(?__netamt_clean)) AS ?__net_amount)

# Discriminator - for use where no symbol exists in the data
# Sum of qty,price,gross,commission,net as a discrimator to create a unique Event IRI
    BIND(STR(round((?__qty_amount + ?__price_amount + ?__gross_amount + ?__commission_amount + ?__net_amount)*1000)/1000) AS ?__discriminator_str)

#  Local part of Security IRI = the equity symbol = where no ticker symbol exists
    BIND(CONCAT(
        COALESCE(?ActivityType, 'unknown'),'_',
        COALESCE(STR(?Action), 'unknown'),'_',
        COALESCE(STR(?ActivityType), 'unknown'),'_',
        STR(?__transaction_date),'_',
        ?__discriminator_str
    ) AS ?__no_symbol)

# Equity Symbol
    BIND(COALESCE(UCASE(?__symbol_str_norm), ?__no_symbol) AS ?__eq_symbol)

# Security ID
    BIND(IRI(CONCAT(STR(mg3:),'_ID_marketableSecurity_', ?__eq_symbol)) AS ?__security_id)

# Account Number
    BIND(ENCODE_FOR_URI(LCASE(STR(?AccountNumber))) AS ?__acct_key)

# Marketable Security
    BIND(IRI(CONCAT(STR(mg3:),'_MarketableSecurity_', ?__eq_symbol)) AS ?__security)

# Security Account
    BIND(IRI(CONCAT(STR(mg3:),'_InvestmentAccount_',?__acct_key,'_',?__eq_symbol)) AS ?__security_account)

# Currency - CAD or USD
    BIND(IF(?Currency="CAD", mgx:_CADollar, IF(?Currency="USD", gist:_USDollar, ?unbound)) AS ?__currency)
    BIND(LCASE(REPLACE(?Currency, "\\W+", "-")) AS ?__currency_key)

# Settlement Date
    BIND(REPLACE(?SettlementDate,"^([0-9-]+).*$","$1T00:00:00") AS ?__settle_dt_str)
    BIND(STRDT(?__settle_dt_str, xsd:dateTime) AS ?__settlement_date)

# Determine the Event type
#
# Action - default to Unknown if not yet modeled
# BIND(COALESCE(
#     IF(!BOUND(?Action) || UCASE(?Action)='DIV' || UCASE(?ActivityType)='DIVIDENDS',mgx:_FinancialBusinessEventType_dividendRemittance, 1/0),
#     IF(!BOUND(?Action) && !BOUND(?Symbol) && STRSTARTS(?Description, 'INT'), mgx:_FinancialBusinessEventType_interestPaid, 1/0),
#     IF(UCASE(?Action)='BUY',gist:_FinancialBusinessEventType_purchase, 1/0),
#     IF(UCASE(?Action)='SELL',gist:_FinancialBusinessEventType_sale, 1/0),
#     IF(UCASE(?Action)='INT',mgx:_FinancialBusinessEventType_interestRemittance, 1/0),
#     IF(UCASE(?Action)='DEP',mgx:_FinancialBusinessEventType_deposit, 1/0),
#     IF(UCASE(?Action)='CON',mgx:_FinancialBusinessEventType_contribution, 1/0),
#     IF(UCASE(?Action)='MGR',mgx:_FinancialBusinessEventType_deposit, 1/0),
#     IF(UCASE(?Action)='EFT',gist:_FinancialBusinessEventType_financialTransfer, 1/0),
#     IF(UCASE(?Action)='FXT',mgx:_FinancialBusinessEventType_exchangeOfCurrency, 1/0),
#     IF(UCASE(?Action)='LQD',mgx:_FinancialBusinessEventType_assetTransferForLiquidation, 1/0),
#     IF(UCASE(?Action)='LIQ',mgx:_FinancialBusinessEventType_assetLiquidation, 1/0),
#     IF(UCASE(?Action)='TFI' && !BOUND(?Equity_Symbol), gist:_FinancialBusinessEventType_financialTransfer, 1/0),
#     IF(UCASE(?Action)='TFI' && BOUND(?Equity_Symbol), mgx:_FinancialBusinessEventType_assetTransfer, 1/0),
#     IF(UCASE(?Action)='TF6' && !BOUND(?Equity_Symbol), gist:_FinancialBusinessEventType_financialTransfer, 1/0),
#     IF(UCASE(?Action)='RED',mgx:_FinancialBusinessEventType_debtPrincipalRepayment, 1/0),
#     IF(UCASE(?Action)='REV',mgx:_FinancialBusinessEventType_reverseStockSplit, 1/0),
#     mgx:_FinancialBusinessEventType_unknown) AS ?__event_type)

# Is this easier to understand than a bunch of IF/ELSE ??
    OPTIONAL {
        VALUES (?__action ?__evt_type) {
            ('BUY' gist:_FinancialBusinessEventType_purchase)
            ('CON' mgx:_FinancialBusinessEventType_contribution)
            ('DEP' mgx:_FinancialBusinessEventType_deposit)
            ('DIV' mgx:_FinancialBusinessEventType_dividendRemittance)
            ('EFT' gist:_FinancialBusinessEventType_financialTransfer)
            ('FXT' mgx:_FinancialBusinessEventType_exchangeOfCurrency)
            ('INT' mgx:_FinancialBusinessEventType_interestRemittance)
            ('LIQ' mgx:_FinancialBusinessEventType_assetLiquidation)
            ('LQD' mgx:_FinancialBusinessEventType_assetTransferForLiquidation)
            ('MER' mgx:_FinancialBusinessEventType_assetMerger)
            ('MGR' mgx:_FinancialBusinessEventType_deposit)
            ('RED' mgx:_FinancialBusinessEventType_debtPrincipalRepayment)
            ('REV' mgx:_FinancialBusinessEventType_reverseStockSplit)
            ('SELL' gist:_FinancialBusinessEventType_sale)
            ('TF6' gist:_FinancialBusinessEventType_financialTransfer) 
            ('TFI' mgx:_FinancialBusinessEventType_assetTransfer)
        }

# The strategy here is as follows:
# We test one by one the odd cases, potentially binding an event type 
# In the useual case, the Action column value matches one action string in the VALUES list and the event type is bound as the result.
# More than one variable may bind, potentially; these are coalesced into a single result event type
        BIND(IF(!BOUND(?Action) && !BOUND(?Symbol) && STRSTARTS(?Description, 'INT'), mgx:_FinancialBusinessEventType_interestPaid, ?unbound) AS ?__inferred_int_type)
        BIND(IF(!BOUND(?Action) && UCASE(?ActivityType)='DIVIDENDS', mgx:_FinancialBusinessEventType_dividendRemittance, ?unbound) AS ?__inferred_div_type)
        BIND(IF(UCASE(?Action)='TFI' && !BOUND(?Equity_Symbol), gist:_FinancialBusinessEventType_financialTransfer, ?unbound) AS ?__tfi_1)
        BIND(IF(UCASE(?Action)='TFI' && BOUND(?Equity_Symbol), mgx:_FinancialBusinessEventType_assetTransfer, ?unbound) AS ?__tfi_2)

# From the many, shall one only be chosen.
        BIND(COALESCE(
            ?__inferred_div_type,
            ?__inferred_int_type,
            ?__tfi_1,
            ?__tfi_2,
            ?__evt_type,
            mgx:_FinancialBusinessEventType_unknown
        ) AS ?__event_type)
        
        FILTER(UCASE(?Action) = ?__action || !BOUND(?Action)) 
    }

# Transaction key = convenience binding for making new IRIs
    BIND(CONCAT(
        ?__acct_key,'_',
        ?__eq_symbol,'_',
        REPLACE(LCASE(?Action),"\\W+","-"),'_',
        ?__date_key,'_',
        REPLACE(LCASE(?Currency),"\\W+","-")
        ) AS ?__tx_key)

# Activity
    BIND(IRI(CONCAT(
        STR(mg3:),
        '_Event_',
        ?__tx_key,
        '_',
        ?__discriminator_str)) AS ?__activity)
        # )) AS ?__activity)

# Activity Label
    BIND(CONCAT(?Activity_Type, " ", ?__eq_symbol, " ", STR(?__transaction_date)) AS ?__activity_label)


#### Mine the Description for bond terms

# Coupon Rate (%)
    BIND(IF(REGEX(?Description, "\\bINT\\b\\s+[0-9.]+%"), 
        REPLACE(?Description, "^.*\\bINT\\b\\s+([\\d.]+)%.*$","$1"),
        ?unbound) AS ?__coupon_str)
    BIND(xsd:decimal(?__coupon_str)/100 as ?__coupon_rate)

# Coupon Magnitude
    BIND(IRI(CONCAT(STR(mg3:),'_Coupon_', ?__eq_symbol, '_', REPLACE(?__coupon_str, "\\W+","-"))) AS ?__coupon_magn)

# Coupon Magnitude Label
    BIND(CONCAT(?__coupon_str,'%') AS ?__coupon_magn_label)

# Coupon Payment Terms
    BIND(IF(?__is_bond, IRI(CONCAT(STR(mg3:),'_CouponPaymentTerms_', ?__eq_symbol)), ?unbound) AS ?__coupon_payment_terms)

# Month Pair
    BIND(IF(?__is_bond && REGEX(UCASE(?Description), "\\b[A-Z]{2} [0-9]{2}"), REPLACE(?Description, "^.*\\b([A-Z]{2}) [0-9]{2}.*$", "$1"), ?unbound) AS ?__mo_pair_str)

# Coupon Payment Months
    OPTIONAL {
        VALUES (?monthduo ?earlier_mo ?later_mo) { 
            ("JJ" 01 07) 
            ("FA" 02 08) 
            ("MS" 03 09) 
            ("AO" 04 10) 
            ("MN" 05 11) 
            ("JD" 06 12)
        }
        FILTER(STR(?__mo_pair_str) = ?monthduo)
        BIND(?earlier_mo AS ?__coupon_mo_earlier)
        BIND(?later_mo AS ?__coupon_mo_later)
    }
  
# Month-Day Number of Payment, 01 - 31
    BIND(IF(?__is_bond && REGEX(UCASE(?Description), " \\b[JFMASOND][JFMASOND] [0-9]{2}\\b"), REPLACE(?Description, "^.*\\b[JFMASOND][JFMASOND] ([0-9]{2})\\b.*$", "$1"), ?unbound) AS ?__mo_day_nb_str)
    BIND(xsd:integer(?__mo_day_nb_str) AS ?__mo_day_nbr)

# Yield To Maturity
    BIND(IF(?__is_bond && CONTAINS(?Description, " YTM "), REPLACE(?Description, "^.*\\bYTM:?\\s*([0-9.-]+).*$", "$1"), ?unbound) AS ?__ytm_str)
    BIND(STRDT(?__ytm_str, xsd:decimal)/100 AS ?__ytm_num)
    BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_yieldToMaturity_', REPLACE(?__ytm_str,"\\W+","-"))) AS ?__ytm_magn)

# Due (Maturity)
    BIND(IF(?__is_bond && REGEX(UCASE(?Description),"\\bDUE\\b"), 
        REPLACE(?Description, "^.*\\bDUE ([0-9/]+)\\b.*$","$1"),
        ?unbound) AS ?__due_dt_str)
    BIND(STRDT(REPLACE(?__due_dt_str,"(\\d{2})/(\\d{2})/(\\d{4})","$3-$1-$2T00:00:00"),xsd:dateTime) AS ?__maturity_datetime)

# Repayment Event
    BIND(IF(?__is_bond, IRI(CONCAT(STR(mg3:),'_Event_debtPrincipalRepayment_',?__acct_key,'_',?__eq_symbol,'_',?__qty_clean)), ?unbound) AS ?__repayment_event)


##### ACTIONS ##########

#### Dividends
    OPTIONAL {
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_dividendRemittance)
        # Only net amount counts
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_dividend_',?__currency_key,'_',?__netamt_clean)) AS ?__dividend_magn)
        # Dividends increment the cash account
        BIND(mg:isIncrementedBy AS ?__inc_dec_cash_div)
    }

#### Interest paid (as a fee)
    OPTIONAL {
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_interestPaid_',?__currency_key,'_',?__netamt_clean)), 
        ?unbound) AS ?__interest_paid_magn)
        # Interest paid decrements the cash account
        BIND(mg:isDecrementedBy AS ?__inc_dec_cash_intpaid)
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_interestPaid)
    }

#### Purchase / Buy
    # Need all of Quantity,Price,Gross Amt,Commission,Net Amt
    OPTIONAL {   
        FILTER(?__event_type = gist:_FinancialBusinessEventType_purchase)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_shareQuantity_',?__currency_key,'_',?__qty_clean)) AS ?__purchase_qty_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_unitPrice_',?__currency_key,'_',?__price_clean)) AS ?__purchase_price_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_grossAmount_',?__currency_key,'_',?__grossamt_clean)) AS ?__purchase_gross_amt_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_commissionPaid_',?__currency_key,'_',?__commamt_clean)) AS ?__purchase_commission_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_netAmount_',?__currency_key,'_',?__netamt_clean)) AS ?__purchase_net_amt_magn)
    # Purchases increment the security account balance
        BIND(mg:isIncrementedBy AS ?__inc_dec_asset_purchase)
    # Purchases decrement the cash balance
        BIND(mg:isDecrementedBy AS ?__inc_dec_cash_purchase)
    }

### Sell
    OPTIONAL {
        FILTER(?__event_type = gist:_FinancialBusinessEventType_sale)
    # Need all of Quantity,Price,Gross Amt,Commission,Net Amt
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_shareQuantity_',?__currency_key,'_',?__qty_clean)) AS ?__sale_qty_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_unitPrice_',?__currency_key,'_',?__price_clean)) AS ?__sale_price_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_grossAmount_',?__currency_key,'_',?__grossamt_clean)) AS ?__sale_gross_amt_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_commissionPaid_',?__currency_key,'_',?__commamt_clean)) ?__sale_commission_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_netAmount_',?__currency_key,'_',?__netamt_clean)) AS ?__sale_net_amt_magn)
    # Sales increment the cash balance ...
        BIND(mg:isIncrementedBy AS ?__inc_dec_cash_sale)
    # ... and decrement the share quantity balance
        BIND(mg:isDecrementedBy AS ?__inc_dec_asset_sale)
    }

### Interest received from a bond coupon payment
    OPTIONAL {
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_interestRemittance)
        # Only net amount counts
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_interestReceived_',?__currency_key,'_',?__netamt_clean)) AS ?__interest_magn)
    # Interest received increments the cash balance, leaves share balance unchanged
        BIND(mg:isIncrementedBy AS ?__inc_dec_cash_int_recvd)
    # Add a CouponPaymentEvent type to the event if that's what this is
    # Really, this should be handled by the inference engine but most
    # triple stores do not fully interpret owl:EquivalentClass
        BIND(mg:CouponPaymentEvent AS ?__coupon_payment_event)
    }

### Deposits
    OPTIONAL {
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_deposit)
    # Only net amount counts
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_deposit_',?__currency_key,'_',?__netamt_clean)) AS ?__deposit_magn)
    # Deposits increment the cash balance
        BIND(mg:isIncrementedBy AS ?__inc_dec_cash_dep)
    }

### Contributions
# treat as deposits for now
    OPTIONAL{
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_contribution)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_contribution_',?__currency_key,'_',?__netamt_clean)) AS ?__contrib_magn)
# Contributions increment the cash balance, but do not change asset balances
        BIND(mg:isIncrementedBy AS ?__inc_dec_cash_cont)
    }

### Financial Transfer (money, not assets)
## Outgoing EFTs are cash withdrawals; incoming are transfers from other institutions
## Questrade muddies the waters here by treating incoming transfers from "known" bank account
## as "contributions" or "deposits", while unknown accounts are treated as EFTs.
    OPTIONAL {
        FILTER(?__event_type = gist:_FinancialBusinessEventType_financialTransfer)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_financialTransfer_',?__currency_key,'_',?__netamt_clean)) AS ?__fin_transfer_magn)
    # Use sign of net amount to determine impact on cash balance. A zero means unbound, so no account movement
        BIND(
            IF(xsd:decimal(?NetAmount) > 0, mg:isIncrementedBy,
            IF(xsd:decimal(?NetAmount) < 0, mg:isDecrementedBy,
            ?unbound)) AS ?__inc_dec_cash_eft)
    }

### Asset Transfer - in or out of accounts I own
    OPTIONAL {# Only Quantity counts - this is securities, not $$ changing hands
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_assetTransfer)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_assetTransfer_',?__tx_key,'_',?__qty_clean)) AS ?__asset_transfer_magn)
    # Use sign of quantity to determine impact on investment account balance
        BIND(
            IF(xsd:decimal(?Quantity) > 0, mg:isIncrementedBy,
            IF(xsd:decimal(?Quantity) < 0, mg:isDecrementedBy,
            ?unbound)) AS ?__inc_dec_asset_transfer)
    }

### Special case of Asset Transfer in view of Liquidation
# Seems to imply an involuntary transfer of shares - conducted by the broker - into an escrow account
    OPTIONAL {
    # Only Quantity counts
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_assetTransferForLiquidation)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_assetTransferForLiquidation_',?__tx_key,'_',?__qty_clean)) AS ?__asset_transferForLiqd_magn)
        BIND(mg:isIncrementedBy AS ?__inc_dec_asset_transfer_liqd)
    }

### Asset Liquidation - this is the forced sale of an asset that has been 
# previously transferred for liquidation
# Account Share balance is decremented; Cash balance is incremented.
    OPTIONAL {
        FILTER(?__event_type = mgx:_FinancialBusinessEventType_assetLiquidation)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_shareQuantity_',?__tx_key,'_',?__qty_clean)) AS ?__asset_liqd_qty_magn)
        BIND(IRI(CONCAT(STR(mg3:),'_Magnitude_netAmount_',?__currency_key,'_',?__netamt_clean)) AS ?__asset_liqd_net_amt_magn)
        BIND(mg:isIncrementedBy AS ?__inc_dec_cash_assetliqd)
        BIND(mg:isDecrementedBy AS ?__inc_dec_assetliqd)
    }

### Debt Principal Repayment (i.e. 'redemption')
# Share balance is decremented; cash balance is incremented

    FILTER(?__event_type = mgx:_FinancialBusinessEventType_debtPrincipalRepayment)
# Repayment Conditions
    BIND(IRI(CONCAT(STR(mg3:),'_BondRepaymentTerms_', ?__acct_key,'_', ?__eq_symbol)) AS ?__bond_repayment_terms)
# Debt Principal Magnitude
    BIND(IRI(CONCAT(STR(mg3:),'_Monetary_debtPrincipalAmount_',?__currency_key,'_',?__eq_symbol,'_',STR(?Quantity))) AS ?__bond_repayment_magn)

    # Redemptions increment the cash balance
    BIND(IF(?__event_type = mgx:_FinancialBusinessEventType_debtPrincipalRepayment, 
        mg:isIncrementedBy, ?unbound) AS ?__inc_dec_cash_red)

    # Redemptions decrement the share balance
    BIND(IF(?__event_type = mgx:_FinancialBusinessEventType_debtPrincipalRepayment, 
        mg:isDecrementedBy, ?unbound) AS ?__inc_dec_asset_red)

### Currency exchanged - from Magnitude
    BIND(IF(?__event_type = mgx:_FinancialBusinessEventType_exchangeOfCurrency, 
        IRI(CONCAT(STR(mg3:),'_Magnitude_exchangedCurrency_',?__currency_key,'_',?__netamt_clean)), 
        ?unbound) AS ?__fxt_magn)
    BIND(IF(?__event_type = mgx:_FinancialBusinessEventType_exchangeOfCurrency && xsd:decimal(?NetAmount) < 0,
        mg:isDecrementedBy,
        IF(?__event_type = mgx:_FinancialBusinessEventType_exchangeOfCurrency && xsd:decimal(?NetAmount) > 0,
        mg:isIncrementedBy, ?unbound)) AS ?__inc_dec_cash_fx)

### Reverse Stock Split
# Only Qty is affected
    BIND(IF(?__event_type = mgx:_FinancialBusinessEventType_reverseStockSplit, 
        IRI(CONCAT(STR(mg3:),'_Magnitude_shareQuantity_',?__currency_key,'_',?__qty_clean)), 
        ?unbound) AS ?__reverse_stk_split_qty_magn)
    BIND(IF(?__event_type = mgx:_FinancialBusinessEventType_reverseStockSplit && xsd:decimal(?Quantity) < 0, 
        mg:isDecrementedBy,
        IF(?__event_type = mgx:_FinancialBusinessEventType_reverseStockSplit && xsd:decimal(?Quantity) > 0,
        mg:isIncrementedBy, ?unbound)) AS ?__inc_dec_asset_split)

# Affected Cash account
    BIND(
        IF(?__currency=mgx:_CADollar, IRI(CONCAT(STR(mg3:),?__acct_key,'_CashAccount_CAD')),
        IF(?__currency=gist:_USDollar, IRI(CONCAT(STR(mg3:),?__acct_key,'_CashAccount_USD')),
        ?unbound)) AS ?__affected_cash_account)

    # Coalesce inc/dec asset predicates
    BIND(COALESCE(
        ?__inc_dec_assetliqd,
        ?__inc_dec_asset_purchase,
        ?__inc_dec_asset_red,
        ?__inc_dec_asset_sale,
        ?__inc_dec_asset_split,
        ?__inc_dec_asset_transfer,
        ?__inc_dec_asset_transfer_liqd
    ) AS ?__inc_dec_asset)


    # Coalesce inc/dec cash predicates
    BIND(COALESCE(
        ?__inc_dec_cash_assetliqd,
        ?__inc_dec_cash_cont,
        ?__inc_dec_cash_dep,
        ?__inc_dec_cash_div,
        ?__inc_dec_cash_eft,
        ?__inc_dec_cash_fx,
        ?__inc_dec_cash_int_recvd,
        ?__inc_dec_cash_intpaid,
        ?__inc_dec_cash_purchase,
        ?__inc_dec_cash_red,
        ?__inc_dec_cash_sale
        ) AS ?__inc_dec_cash)

}