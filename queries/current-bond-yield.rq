PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX gist: <https://w3id.org/semanticarts/ns/ontology/gist/>
PREFIX mg: <https://w3id.org/moneygraph/ns/ontology/>
PREFIX mg3: <https://w3id.org/moneygraph/ns/data/>
PREFIX mgx: <https://w3id.org/moneygraph/ns/taxonomy/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX ofn: <http://www.ontotext.com/sparql/functions/>

SELECT DISTINCT ?bond_iri 
?bond 
(SUM(?net_cost) AS ?cost)
(SUM(?npv_coupon_val) AS ?npv_coupons)
(SUM(?npv_principal) AS ?npv_principal_tot)
(?npv_coupons+?npv_principal_tot AS ?current_bond_value)
(SUM(?npv_cost) AS ?npv_cost_total)
(?ytm AS ?yield_at_purchase)
((?current_bond_value-?npv_cost_total)*100/?npv_cost_total AS ?current_yield)
?desc

#SELECT DISTINCT ?bond_iri 
#?bond_iri
#?purchase_dt
#?coupon_dt
#?coupon_amt
#?npv_coupon_val
#?npv_principal
#(?npv_coupon_val +?npv_principal AS ?current_bond_value)
#?net_cost
#?npv_cost
#((?current_bond_value-?npv_cost)*100/?npv_cost AS ?current_yield)
#?desc
#
FROM qt3:__securities__
FROM qt3:__securities__extra
FROM qt3:__activities__
FROM qt3:__activities__extra
FROM qt3:__trades__

{

    # Inner SELECT to fetch the bond and its latest coupon payment date 
    {
        SELECT DISTINCT ?bond_iri ?bond ?desc (AVG(?_ytm) AS ?ytm) (MAX(?future_coupon_one) AS ?future_coupon_amt) ?maturity (MAX(?past_coupon_dt) AS ?last_coupon_dt) {
            ?bond_iri gist:isCategorizedBy qtx:_MarketableSecurityType_bond ; skos:prefLabel ?bond ; gist:description ?desc ;
		        gist:conformsTo [ a qt:BondRepaymentTerms ; gist:specifies [ a gist:ScheduledEvent ; qt:plannedOccursDate ?maturity ] ] ;
		        gist:conformsTo [ a qt:CouponPaymentTerms ; gist:specifies [ a qt:BondCoupon ; gist:numericValue ?coupon ] ] ;
			.            

            [] gist:hasPositionIn ?bond_iri ;
                gist:hasCurrentBalance [ gist:numericValue ?_principal ; gist:hasAspect qtx:_Aspect_securityShareCount ] ;
                gist:isAffectedBy [
                    gist:isCharacterizedAs qtx:_FinancialBusinessEventType_interestRemittance ;
                    qt:transactionDate ?past_coupon_dt ;
                ] ;
				gist:isAffectedBy [
        			gist:isCharacterizedAs gist:_FinancialBusinessEventType_purchase ;
                    gist:hasMagnitude [
           				gist:numericValue ?_ytm ;
           				gist:hasAspect qtx:_Aspect_yieldToMaturity;
        			] ;
            	] ;
             .  
            BIND((?coupon*?_principal)/(2*100) AS ?future_coupon_one)
        } GROUP BY ?bond_iri ?bond ?desc ?maturity
        ORDER BY ASC(?maturity) ?bond_iri
    }
                
                

    # Every bond was purchased
    ?secacct gist:hasPositionIn ?bond_iri ;
	{ 
    ?secacct gist:isAffectedBy [
        gist:isCharacterizedAs gist:_FinancialBusinessEventType_purchase ;
        qt:transactionDate ?purchase_dt ;
        gist:hasMagnitude [
            gist:numericValue ?principal ; 
            gist:hasAspect qtx:_Aspect_securityShareCount ;
        ] ;
        gist:hasMagnitude [
            gist:numericValue ?net_cost ;
            gist:hasAspect qtx:_Aspect_securityTradeNetAmount ;
        ] ;
    ] ;
	.
	}	
UNION
    # Not every bond has already has a coupon. Concatenate past coupons and future coupons
    {
    ?secacct gist:isAffectedBy [
        gist:isCharacterizedAs qtx:_FinancialBusinessEventType_interestRemittance ;
        qt:transactionDate ?remitdate ;
        gist:hasMagnitude [
            gist:numericValue ?remitamt ;
            gist:hasAspect qtx:_Aspect_debtInterestAmount ;
        ] ;
    ] ;
    .       
    }
UNION
    {
    VALUES ?coupon_payment_period {
        "P0Y6M0DT0H0M0S"^^xsd:duration 
        "P1Y0M0DT0H0M0S"^^xsd:duration 
        "P1Y6M0DT0H0M0S"^^xsd:duration 
        "P2Y0M0DT0H0M0S"^^xsd:duration 
        "P2Y6M0DT0H0M0S"^^xsd:duration 
        "P3Y0M0DT0H0M0S"^^xsd:duration 
        "P3Y6M0DT0H0M0S"^^xsd:duration 
        "P4Y0M0DT0H0M0S"^^xsd:duration 
        "P4Y6M0DT0H0M0S"^^xsd:duration 
        "P5Y0M0DT0H0M0S"^^xsd:duration 
        "P5Y6M0DT0H0M0S"^^xsd:duration 
        "P6Y0M0DT0H0M0S"^^xsd:duration 
        "P6Y6M0DT0H0M0S"^^xsd:duration 
        "P7Y0M0DT0H0M0S"^^xsd:duration 
        "P7Y6M0DT0H0M0S"^^xsd:duration 
        "P8Y0M0DT0H0M0S"^^xsd:duration 
        "P8Y6M0DT0H0M0S"^^xsd:duration 
        "P9Y0M0DT0H0M0S"^^xsd:duration 
        "P9Y6M0DT0H0M0S"^^xsd:duration 
        "P10Y0M0DT0H0M0S"^^xsd:duration 
        "P10Y6M0DT0H0M0S"^^xsd:duration 
        "P11Y0M0DT0H0M0S"^^xsd:duration 
        "P11Y6M0DT0H0M0S"^^xsd:duration 
        "P12Y0M0DT0H0M0S"^^xsd:duration 
    }
    BIND(?last_coupon_dt + ?coupon_payment_period AS ?future_payment_dt)
    BIND(?future_coupon_amt AS ?future_amt)
    FILTER(?maturity > ?future_payment_dt && NOW() < ?future_payment_dt)
    }
# /UNION

    BIND(COALESCE(?remitdate, ?future_payment_dt) AS ?coupon_dt)
    BIND(COALESCE(?remitamt, ?future_amt) AS ?coupon_amt)
    
    BIND(NOW()-?purchase_dt AS ?owned_duration)
    BIND(ofn:years-from-duration(?owned_duration) * 365 + ofn:months-from-duration(?owned_duration) * 30 + ofn:days-from-duration(?owned_duration) AS ?owned_days)   
    BIND(?maturity-NOW() AS ?now_to_mat_duration)
    BIND(ofn:years-from-duration(?now_to_mat_duration) * 365 + ofn:months-from-duration(?now_to_mat_duration) * 30 + ofn:days-from-duration(?now_to_mat_duration) AS ?now_to_mat_days)
    
    BIND(?maturity-?coupon_dt AS ?coupon_remaining_diff)
    BIND(ofn:years-from-duration(?coupon_remaining_diff) * 365 + ofn:months-from-duration(?coupon_remaining_diff) * 30 + ofn:days-from-duration(?coupon_remaining_diff) AS ?coupon_to_mat_daysremaining)

    VALUES (?inflation_rate ?return_rate) { (0.025 0.09) }
    
    BIND(?ytm/100 AS ?yield_to_maturity)
    BIND(?yield_to_maturity AS ?discount_rate)
    BIND(?return_rate/365 AS ?daily_return)
    BIND(?discount_rate/365 AS ?daily_discount)
    BIND(?inflation_rate/365 AS ?daily_inflation)
    BIND(ofn:pow(1+?daily_return, ?coupon_to_mat_daysremaining) AS ?coupon_multiplier) # yield of reinvested past coupons
    BIND(ofn:pow(1+?daily_discount, ?now_to_mat_days) AS ?demultiplier)
    BIND(ofn:pow(1+?daily_inflation, ?owned_days) AS ?owned_since_multiplier)
    
    BIND(?net_cost * ?owned_since_multiplier AS ?npv_cost)
    BIND(?coupon_amt * ?coupon_multiplier AS ?coupon_future_val)
    BIND(?coupon_future_val / ?demultiplier AS ?npv_coupon_val)
    BIND(?principal / ?demultiplier AS ?npv_principal)
}
GROUP BY ?bond_iri ?bond ?desc ?ytm
ORDER BY ?bond_iri ?purchase_dt ?coupon_dt
